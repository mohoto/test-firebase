{"version":3,"sources":["Composants/Todo.js","firebase.js","Composants/interfaces/SiderContent.js","Composants/interfaces/SiderDemo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","Item","Meta","avatar","src","title","href","txt","description","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","SiderContent","useState","todos","setTodo","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","console","log","docs","map","doc","data","todo","timestamp","FieldValue","serverTimestamp","placeholder","value","onChange","event","target","type","onClick","preventDefault","add","message","error","style","marginTop","itemLayout","dataSource","renderItem","item","Header","Layout","Content","Footer","Sider","SubMenu","Menu","SiderDemo","collapsed","setCollapsed","minHeight","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","key","icon","PieChartOutlined","DesktopOutlined","UserOutlined","TeamOutlined","FileOutlined","padding","margin","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.defa6dd3.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Avatar } from 'antd';\n\nexport default function Todo(props) {\n    return (\n        <List.Item>\n            <List.Item.Meta\n            avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n            title={<a href=\"https://ant.design\">{props.txt}</a>}\n            description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n            />\n        </List.Item>\n    )\n}\n","  import firebase from 'firebase';\n\n  const firebaseApp = firebase.initializeApp({\n        apiKey: \"AIzaSyAR4M-pfj0DG8LEsexNrKHkBycLEBH2unA\",\n        authDomain: \"app-test-a1a35.firebaseapp.com\",\n        databaseURL: \"https://app-test-a1a35.firebaseio.com\",\n        projectId: \"app-test-a1a35\",\n        storageBucket: \"app-test-a1a35.appspot.com\",\n        messagingSenderId: \"823628415021\",\n        appId: \"1:823628415021:web:8543ae286f9047efcf78a4\"\n  });\n\n  const db = firebaseApp.firestore();\n\nexport default db;","import React, {useState, useEffect} from 'react';\nimport { Input } from 'antd';\nimport { Button, message, List} from 'antd';\nimport Todo from '../Todo';\nimport db from '../../firebase';\nimport firebase from 'firebase';\n\n\nexport default function SiderContent() {\n\n    const [todos, setTodo] = useState(['Faire du sport', 'Se former à React']);\n    const [input, setInput] = useState('');\n\n    useEffect(() => {\n        db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n            console.log(snapshot);\n            //console.log(snapshot.docs.map(doc => doc.data()));\n            //setTodoconsole.log(snapshot.docs.map(doc => doc.data().todo));\n            setTodo(snapshot.docs.map(doc => doc.data().todo))\n        })\n    }, []);\n\n    //console.log(todos);\n    const timestamp =  firebase.firestore.FieldValue.serverTimestamp();\n    console.log(timestamp);\n\n\n    const addTodo = event => {\n        event.preventDefault();\n        if(input){\n            db.collection('todos').add({ \n                todo : input,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp()\n            })\n            //setTodo([...todos, input]);\n            setInput('');\n        }\n        else {\n            message.error('Ajouter une tâche');\n        }\n    }\n\n    return (\n        <div>\n            <h1>React avec Ant design</h1>\n            <h2>TODO LIST</h2>\n            <Input placeholder=\"Tâche à faire\" value={input} onChange={event => setInput(event.target.value)} />\n            <Button type=\"primary\" onClick={addTodo} style={{ marginTop: '15px' }}>Ajouter tâche</Button>\n            {/* <ul>\n                {todos.map(todo =>\n                <Todo todo={todo}/>   \n                    )}\n            </ul> */}\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={todos}\n                renderItem={item => (\n                <Todo txt={item}/>\n                )}\n            />\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\n//import SiderContent from './SiderContent';\nimport {\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport './SiderDemo.css';\nimport 'antd/dist/antd.css';\nimport SiderContent from './SiderContent';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nfunction SiderDemo() {\n  \n\n  const [collapsed, setCollapsed] = useState(false);\n\n  const onCollapse = collapsed => {\n    console.log(collapsed);\n    //this.setState({ collapsed });\n    setCollapsed(collapsed);\n  };\n\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n            <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\n              Option 1\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n              Option 2\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"User\">\n              <Menu.Item key=\"3\">Tom</Menu.Item>\n              <Menu.Item key=\"4\">Bill</Menu.Item>\n              <Menu.Item key=\"5\">Alex</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Team\">\n              <Menu.Item key=\"6\">Team 1</Menu.Item>\n              <Menu.Item key=\"8\">Team 2</Menu.Item>\n            </SubMenu>\n            <Menu.Item key=\"9\" icon={<FileOutlined />}>\n              Files\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                <h1>MY APP</h1>\n           </Header> \n          <Content style={{ margin: '0 16px' }}>\n            <Breadcrumb style={{ margin: '16px 0' }}>\n              <Breadcrumb.Item>User</Breadcrumb.Item>\n              <Breadcrumb.Item>Bill</Breadcrumb.Item>\n            </Breadcrumb>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              \n              <SiderContent />\n\n            </div>\n        </Content>\n          <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n\nexport default SiderDemo;","import React from 'react';\nimport 'antd/dist/antd.css';\nimport SiderDemo from './Composants/interfaces/SiderDemo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SiderDemo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}